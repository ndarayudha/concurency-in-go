package chapter3

import (
	"bytes"
	"fmt"
	"os"
	"sync"
	"testing"
)

// Declaring Channel
//
// var dataStream chan interface {}
// dataStream = make(chan interface{})
//
// unidirectional channel (received only)
// var dataStream <- chan interface {}
// dataStream := make(<-chan interface{})
//
// unidirectional channel (send only)
// var dataStream chan <- interface{}
// dataStream := make(chan <- interface{})
//
// Go will implicitly convert bidirectional channels to unidirectional channel when needed
// var receiveChan <-chan interface{}
// var sendChan chan<- interface{}
// dataStream := make(chan interface{})
//
// receiveChan = dataStream
// sendChan = dataStream

func TestChannel(t *testing.T) {
	stringStream := make(chan string)
	go func() {
		stringStream <- "Hello channels!"
	}()

	// Second return value is a way for a
	// read operation to indicate whether the read off the channel was a value generated by a
	// write elsewhere in the process, or a default value generated from a (closed channel).
	salutation, ok := <-stringStream
	fmt.Printf("(%v): %v", salutation, ok)
}

func TestClosedChannel(t *testing.T) {
	// We were still able to perform a read operation, and in fact, we could continue performing
	// reads on this channel indefinitely despite the channel remaining closed. This is to
	// allow support for multiple downstream reads from a single upstream writer on the
	// channel
	intStream := make(chan int)
	close(intStream) // will make ok = false (closed channel)
	integer, ok := <-intStream
	fmt.Printf("(%v): %v", ok, integer)
}

func TestDeadlock(t *testing.T) {
	// Channels in go is blocking. Any goroutine that attempt to write to a channel that is full will wait
	// until the channel empty, and any goroutine that attempts to read from a channel that is empty,
	// will wait until at least one item is placed on it.
	dataStream := make(chan string)
	go func() {
		if 0 != 1 {
			return
		}
		dataStream <- "Hello World"
	}()

	fmt.Println(<-dataStream)
}

func TestRangingChannel(t *testing.T) {
	// The range keyword—used in conjunction with the for statement—supports channels as
	// arguments, and will automatically break the loop when a channel is closed. This
	// allows for concise iteration over the values on a channel.

	intStream := make(chan int)
	go func() {
		// Will block if not closed
		// Signal the waiting goroutine
		defer close(intStream)

		for i := 1; i <= 5; i++ {
			intStream <- i
		}
	}()

	// continously received data from channel until it's closed
	for integer := range intStream {
		fmt.Printf("%v ", integer)
	}
}

func TestClosedChannel2(t *testing.T) {
	// original := runtime.GOMAXPROCS(1)
	// defer runtime.GOMAXPROCS(original)

	stream := make(chan interface{})
	var wg sync.WaitGroup

	for i := 0; i < 5; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			<-stream
			fmt.Printf("%v has begun\n", i)
		}(i)
	}

	fmt.Println("Unblocking goroutines...")
	close(stream)
	wg.Wait()
}

func TestBufferedChannel(t *testing.T) {
	var stdoutBuff bytes.Buffer
	defer stdoutBuff.WriteTo(os.Stdout)

	intStream := make(chan int, 4)
	go func() {
		defer close(intStream)
		defer fmt.Fprintln(&stdoutBuff, "Producer Done.")
		for i := 0; i < 5; i++ {
			fmt.Fprintf(&stdoutBuff, "Sending: %d\n", i)
			intStream <- i
		}
	}()

	for integer := range intStream {
		fmt.Fprintf(&stdoutBuff, "Received %v \n", integer)
	}
}

func TestChanOwnership(t *testing.T) {
	// The goroutine that owns channel should
	// 1. Instantiate the channel
	// 2. Perform writes, or pass ownership to another goroutine
	// 3. Close the channel
	// 4. Enncapsulate the previous things in this list and expose via a reader channel
	chanOwner := func() <-chan int {
		resultStream := make(chan int, 5)
		go func() { // channel owner
			defer close(resultStream) // responsibility for channel owner
			for i := 0; i < 5; i++ {
				resultStream <- i
			}
		}()

		return resultStream
	}

	resultStream := chanOwner()
	for result := range resultStream {
		fmt.Printf("Received: %d\n", result)
	}

	fmt.Println("Done receiving")
}
